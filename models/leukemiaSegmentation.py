# -*- coding: utf-8 -*-
"""leukemiaSegmentation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W_6edQOaGP3LBCcLzIyC6YYzfehZnosE
"""

!nvidia-smi

from google.colab import drive
drive.mount('/content/drive')

pip install ultralytics

from ultralytics import YOLO

# Load a model
model = YOLO("yolo11n-seg.yaml")  # build a new model from YAML
model = YOLO("yolo11n-seg.pt")  # load a pretrained model (recommended for training)
model = YOLO("yolo11n-seg.yaml").load("yolo11n.pt")  # build from YAML and transfer weights

# Train the model
results = model.train(data="/content/drive/MyDrive/leukemia_dataset/data.yaml", epochs=100, imgsz=640)

#Validation
from ultralytics import YOLO

# Load a model
model = YOLO("/content/runs/segment/train/weights/best.pt")  # load an official model
metrics = model.val(data="/content/drive/MyDrive/leukemia_dataset/data.yaml")

# Validate the model
metrics = model.val()  # no arguments needed, dataset and settings remembered
metrics.box.map  # map50-95(B)
metrics.box.map50  # map50(B)
metrics.box.map75  # map75(B)
metrics.box.maps  # a list contains map50-95(B) of each category
metrics.seg.map  # map50-95(M)
metrics.seg.map50  # map50(M)
metrics.seg.map75  # map75(M)
metrics.seg.maps  # a list contains map50-95(M) of each category

import matplotlib.pyplot as plt
import cv2
import os
from ultralytics import YOLO

# Load the trained model
model = YOLO("/content/runs/segment/train/weights/best.pt")  # Update with your model path

# Path to a single test image
image_path = "/content/drive/MyDrive/leukemia_dataset/test/images/L7170127_JPG_jpg.rf.7591a7fc480ffe1702ce5cac7eb4307a.jpg"

# Run inference (prediction)
results = model(image_path, save=True)  # Save output

# Get the path of the saved image
output_dir = "runs/segment/predict"
output_image_path = os.path.join(output_dir, os.path.basename(image_path))

# Load and display the image with Matplotlib
image = cv2.imread(output_image_path)  # Read image
image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)  # Convert BGR to RGB for correct display

plt.figure(figsize=(8, 8))
plt.imshow(image)
plt.axis("off")  # Hide axes
plt.show()

# Access segmentation masks
for result in results:
    masks = result.masks.data  # Mask in matrix format (num_objects x H x W)
    print("Detected objects:", len(masks))  # Print number of detected objects

from google.colab import files
files.download("runs/segment/train/weights/best.pt")